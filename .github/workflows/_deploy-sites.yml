name: sites-deploy-workflow

on:
  workflow_call:
    inputs:
      node_version:
        description: "Node.js version to use"
        default: "22"
        type: string
      delay_seconds:
        description: "Delay in seconds before starting the deployment"
        required: false
        default: 0
        type: number
      deploy_webapp:
        description: "Whether to deploy web app"
        required: false
        default: true
        type: boolean
      deploy_docs:
        description: "Whether to deploy docs"
        required: false
        default: true
        type: boolean
      deploy_redirect:
        description: "Whether to deploy redirect"
        required: false
        default: true
        type: boolean
      deploy_sandbox:
        description: "Whether to deploy sandbox"
        required: false
        default: true
        type: boolean
  workflow_dispatch:
    inputs:
      node_version:
        description: "Node.js version to use"
        default: "22"
        type: string
      delay_seconds:
        description: "Delay in seconds before starting the deployment"
        required: false
        default: 0
        type: number
      deploy_webapp:
        description: "Whether to deploy web app"
        required: false
        default: true
        type: boolean
      deploy_docs:
        description: "Whether to deploy docs"
        required: false
        default: true
        type: boolean
      deploy_redirect:
        description: "Whether to deploy redirect"
        required: false
        default: true
        type: boolean
      deploy_sandbox:
        description: "Whether to deploy sandbox"
        required: false
        default: true
        type: boolean

jobs:
  delay:
    name: Delay before deployment
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [ ${{ inputs.delay_seconds }} -gt 0 ]; then
            echo "Delaying for ${{ inputs.delay_seconds }} seconds as requested..."
            sleep ${{ inputs.delay_seconds }}
          else
            echo "No delay requested, proceeding immediately..."
          fi

  deploy-webapp:
    name: Deploy Web App
    needs: delay
    if: ${{ inputs.deploy_webapp }}
    uses: ./.github/workflows/__deploy-pages.yml
    with:
      project_name: "altair-webapp"
      dist_path: "packages/altair-app/dist/browser"
      deployment_name: "Deploy Web App"
      node_version: ${{ inputs.node_version }}
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-docs:
    name: Deploy Docs
    needs: delay
    if: ${{ inputs.deploy_docs }}
    uses: ./.github/workflows/__deploy-pages.yml
    with:
      project_name: "altair-site"
      dist_path: "packages/altair-docs/.vitepress/dist"
      deployment_name: "Deploy Documentation"
      node_version: ${{ inputs.node_version }}
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-redirect:
    name: Deploy Login Redirect
    needs: delay
    if: ${{ inputs.deploy_redirect }}
    uses: ./.github/workflows/__deploy-pages.yml
    with:
      project_name: "altair-login-redirect"
      dist_path: "packages/login-redirect/dist"
      deployment_name: "Deploy Login Redirect"
      node_version: ${{ inputs.node_version }}
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-sandbox:
    name: Deploy Sandbox
    needs: delay
    if: ${{ inputs.deploy_sandbox }}
    uses: ./.github/workflows/__deploy-pages.yml
    with:
      project_name: "altair-iframe-sandbox"
      dist_path: "packages/altair-iframe-sandbox/dist"
      deployment_name: "Deploy Iframe Sandbox"
      node_version: ${{ inputs.node_version }}
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
