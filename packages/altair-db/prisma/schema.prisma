// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  // Needed to prevent segmentation fault crashes https://github.com/prisma/prisma/issues/10649#issuecomment-1249209025
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model QueryItem {
  id                String              @id @default(cuid())
  queryVersion      Int                 @default(1)
  name              String
  collectionId      String
  collection        QueryCollection     @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  content           Json
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  QueryItemRevision QueryItemRevision[]
}

/// QueryItemRevision is a revision of a QueryItem. It is created when a QueryItem is updated.
model QueryItemRevision {
  id            String    @id @default(cuid())
  queryItemId   String
  queryItem     QueryItem @relation(fields: [queryItemId], references: [id], onDelete: Cascade)
  name          String
  collectionId  String
  content       Json
  createdAt     DateTime  @default(now())
  createdById   String
  createdByUser User      @relation(fields: [createdById], references: [id])
}

// TODO: alter table queries enable row level security;

model QueryCollection {
  id                       String            @id @default(cuid())
  name                     String
  description              String?
  preRequestScript         String?
  preRequestScriptEnabled  Boolean           @default(true)
  postRequestScript        String?
  postRequestScriptEnabled Boolean           @default(true)
  workspaceId              String
  workspace                Workspace         @relation(fields: [workspaceId], references: [id])
  parentCollectionId       String?
  parentCollection         QueryCollection?  @relation(name: "ParentCollection", fields: [parentCollectionId], references: [id], onDelete: Cascade)
  queries                  QueryItem[]
  queryCollections         QueryCollection[] @relation("ParentCollection")
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
}

model Workspace {
  id              String            @id @default(cuid())
  QueryCollection QueryCollection[]
  name            String
  ownerId         String
  owner           User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  teamId          String?
  team            Team?             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model User {
  id                String              @id @default(cuid())
  firstName         String?
  lastName          String?
  email             String              @unique
  emailVerified     DateTime?
  password          String?
  picture           String?
  stripeCustomerId  String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Workspace         Workspace[]
  UserCredential    UserCredential[]
  TeamMembership    TeamMembership[]
  Team              Team[]
  UserPlan          UserPlan?
  QueryItemRevision QueryItemRevision[]
  CreditBalance     CreditBalance?
  CreditTransaction CreditTransaction[]
  CreditPurchase    CreditPurchase[]
  AiChatSession     AiChatSession[]
}

enum IdentityProvider {
  GOOGLE
}

model UserCredential {
  id             String           @id @default(cuid())
  provider       IdentityProvider
  providerUserId String
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([userId, provider])
}

model Team {
  id              String           @id @default(cuid())
  name            String
  description     String?
  ownerId         String
  owner           User             @relation(fields: [ownerId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  TeamMemberships TeamMembership[]
  Workspace       Workspace[]
}

enum TeamMemberRole {
  ADMIN
  MEMBER
}

model TeamMembership {
  userId    String
  teamId    String
  role      TeamMemberRole @default(MEMBER)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
}

model PlanConfig {
  id                   String     @unique
  stripeProductId      String?
  maxQueryCount        Int
  maxTeamCount         Int
  maxTeamMemberCount   Int
  queryRevisionLimit   Int        @default(10)
  allowMoreTeamMembers Boolean    @default(false)
  UserPlan             UserPlan[]
}

model UserPlan {
  userId     String     @unique
  planRole   String /// as defined in the Stripe product role metadata
  quantity   Int /// indicates number of seats (used for determine maximum team member count)
  user       User       @relation(fields: [userId], references: [id])
  planConfig PlanConfig @relation(fields: [planRole], references: [id])
}

model CreditBalance {
  id             String   @id @default(cuid())
  userId         String   @unique
  fixedCredits   Int
  monthlyCredits Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model CreditTransaction {
  id             String                @id @default(cuid())
  userId         String
  monthlyAmount  Int /// monthly refill amount (in credits)
  fixedAmount    Int /// fixed amount (in credits)
  type           CreditTransactionType
  description    String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  user           User                  @relation(fields: [userId], references: [id])
  CreditPurchase CreditPurchase?
  AiChatMessage  AiChatMessage[]
}

enum CreditTransactionType {
  INITIAL
  MONTHLY_REFILL
  USED
  DOWNGRADED
  PURCHASED
}

model CreditPurchase {
  id                String            @id @default(cuid())
  userId            String
  amount            Int /// amount of credits purchased
  cost              Decimal /// cost of the purchase (NOTE: this is in the currency of the Stripe product, as it is used in the Stripe API)
  stripeSessionId   String
  currency          String
  transactionId     String            @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  user              User              @relation(fields: [userId], references: [id])
  creditTransaction CreditTransaction @relation(fields: [transactionId], references: [id])
}

model AiChatSession {
  id            String          @id @default(cuid())
  userId        String
  title         String
  isActive      Boolean
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id])
  AiChatMessage AiChatMessage[]
}

model AiChatMessage {
  id            String     @id @default(cuid())
  sessionId     String
  message       String
  role          AiChatRole
  transactionId String?

  // User message context
  sdl              String? /// sdl used for additional context (specified for the user messages)
  graphqlQuery     String? /// graphql query used for additional context (specified for the user messages)
  graphqlVariables String? /// graphql variables used for additional context (specified for the user messages)

  // Assistant message context
  inputTokens  Int? /// number of tokens used for input (specified for the assistant messages)
  outputTokens Int? /// number of tokens used for output (specified for the assistant messages)
  rating       AiChatRating? /// rating given by the user (specified for the assistant messages)

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  AiChatSession     AiChatSession      @relation(fields: [sessionId], references: [id])
  creditTransaction CreditTransaction? @relation(fields: [transactionId], references: [id])
}

enum AiChatRating {
  GOOD
  BAD
}

enum AiChatRole {
  USER
  ASSISTANT
}

// QueryItems belong to a QueryCollection
// QueryCollections belong to a Workspace
// Workspaces belong to a User and optionally a Team (owned by the same User)
// Teams belong to a User
// QueryCollections optionally have parent QueryCollections

// https://excalidraw.com/#json=ifRB0uFeTd4UpSruiBNS9,l2UH961ihHvwTHpZnzzQgg
