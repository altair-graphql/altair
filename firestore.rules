rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      // default rules applied to all documents and collections, unless an explicit rule is added
      // https://firebase.google.com/docs/firestore/security/rules-structure#recursive_wildcards
      allow read, write: if false;
    }

    match /users/{userId} {
      allow create: if isUser(userId);
      allow read: if isUser(userId);
      allow update: if isUser(userId);
      
      match /counters/{counterId} {
        allow read: if isUser(userId);
      }

      match /checkout_sessions/{id} {
        allow read, write: if isUser(userId);
      }
      match /subscriptions/{id} {
        allow read: if isUser(userId);
      }
      match /payments/{id} {
        allow read: if isUser(userId);
      }
    }

    // Needed for collection group queries?
    match /{path=**}/query_collections/{collectionId} {
      allow create: if requestBelongsToUser();
      allow read: if resourceBelongsToUser() || resourceBelongsToUsersTeam();
      allow update, delete: if resourceBelongsToUser() || resourceBelongsToUsersTeam();
    }
    match /{path=**}/queries/{queryId} {
      allow create: if isValidSignedInUser() && requestBelongsToUser() && getQueriesCount() < getMaximumAllowedQueriesCount();
      allow read: if resourceBelongsToUser() || resourceBelongsToUsersTeam();
      allow update, delete: if resourceBelongsToUser() || resourceBelongsToUsersTeam();
    }

    // flat - for collection group queries
    // member ID == user ID who is the member
    match /{path=**}/memberships/{memberId} {
      allow read: if resourceBelongsToUser() || currentUserIsTeamMember(resource.data.teamUid);
    }

    match /teams/{teamId} {
      allow create: if isValidSignedInUser() && requestBelongsToUser(); // TODO: && maximum team count (requires team count)
      allow read: if resourceBelongsToUser() || currentUserIsTeamMember(teamId);
      allow update: if resourceBelongsToUser();

      // member ID == user ID who is the member
      match /{path=**}/memberships/{memberId} {
        allow write: if (requestBelongsToUser() || isUser(memberId)) && resource.data.teamUid == teamId;
      }

      match /{path=**}/invitations/{invitationId} {
        // TODO:
        allow read, write: if false;
      }
    }


    match /product_configs/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    // --- Helper functions --- //

    function isValidSignedInUser() {
      return isSignedIn() && userExists();
    }

    function requestMatchesUID() {
      return request.auth.uid == request.resource.data.uid;
    }

    function resourceMatchesUID() {
      return request.auth.uid == resource.data.uid;
    }

    function requestBelongsToUser() {
      return isValidSignedInUser() && request.auth.uid == request.resource.data.ownerUid;
    }

    function resourceBelongsToUser() {
      return isValidSignedInUser() && request.auth.uid == resource.data.ownerUid;
    }

    function resourceBelongsToTeam(teamId) {
      return resource.data.teamUid == teamId;
    }

    function isTeamMember(userId, teamId) {
      return teamId != null && teamId != '' && exists(/databases/$(database)/documents/teams/$(teamId)/memberships/$(userId));
    }

    function currentUserIsTeamMember(teamId) {
      return isTeamMember(request.auth.uid, teamId);
    }

    function resourceBelongsToUsersTeam() {
      return currentUserIsTeamMember(resource.data.teamUid);
    }

    function isSignedIn() {
      return request.auth != null;
    }
    function emailVerified() {
      return request.auth.token.email_verified;
    }
    function userExists() {
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // [READ] Data that exists on the Firestore document
    function existingData() {
      return resource.data;
    }
    // [WRITE] Data that is sent to a Firestore document
    function incomingData() {
      return request.resource.data;
    }

    // Does the logged-in user match the requested userId?
    function isUser(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Fetch a user from Firestore
    function getUserData() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data
    }

    function getCounterValue(counterId) {
      return !exists(/databases/$(database)/documents/users/$(request.auth.uid)/counters/$(counterId)) ? 0 : get(/databases/$(database)/documents/users/$(request.auth.uid)/counters/$(counterId)).data.val;
    }

    function getQueriesCount() {
      return getCounterValue('queries');
    }

    function getMaximumAllowedQueriesCount() {
      return getCurrentPlanConfig().max_query_count;
    }

    // you can set a `firebaseRole` metadata value on the Stripe product
    function hasStripeRole(role) {
      return ('stripeRole' in request.auth.token) && request.auth.token.stripeRole == role;
    }

    // default to the `free` role
    function getStripeRole() {
      return ('stripeRole' in request.auth.token) ? request.auth.token.stripeRole : 'free';
    }

    function hasFreePlan() {
      return hasStripeRole('free');
    }

    function getPlanConfig(stripeRole) {
      return get(/databases/$(database)/documents/plan_configs/$(stripeRole)).data;
    }

    function getCurrentPlanConfig() {
      return getPlanConfig(getStripeRole());
    }

  }
}
